// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dJqK6LEBeKixAKagJBAmzL
// Component: S-EPZS57Iq32

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { PlasmicHead } from "@plasmicapp/react-web"; // plasmic-import: T1KJa5bGl4Ip-/codeComponent
import Navbar from "../../Navbar"; // plasmic-import: ThJz7UjPOLc/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import Button2 from "../../Button2"; // plasmic-import: R7FQakg198I/component
import NetworkCard from "../../NetworkCard"; // plasmic-import: DybXCSmk6J/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent
import MenuOverlay from "../../MenuOverlay"; // plasmic-import: l7JCXcEFvGg/component

import { useScreenVariants as useScreenVariantsvWlfn14Jm89In } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: vWLFN14Jm89IN/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_iddr.module.css"; // plasmic-import: dJqK6LEBeKixAKagJBAmzL/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: S-EPZS57Iq32/css

import GoogleDocsSvgrepoComsvgIcon from "./icons/PlasmicIcon__GoogleDocsSvgrepoComsvg"; // plasmic-import: IYcwKk4Nul/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: g3M_pomcN7I/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: WhOp2OsiY-D/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: ljio8ldcWK/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: ZLscOeex6V/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: iDs7aDQs7T/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: fM-swEdfd/icon
import CmcsvgIcon from "./icons/PlasmicIcon__Cmcsvg"; // plasmic-import: n_1Fj4QpLk/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: V54Kju9r17/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: lDkdlle9aD/icon
import CloseBoldSvgrepoComsvgIcon from "./icons/PlasmicIcon__CloseBoldSvgrepoComsvg"; // plasmic-import: 3wjTpps_Fo/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  pageMetadataOverride?: p.Flex<typeof PlasmicHead>;
  navbar?: p.Flex<typeof Navbar>;
  title?: p.Flex<"div">;
  desc?: p.Flex<"div">;
  desc2?: p.Flex<"div">;
  desc3?: p.Flex<"div">;
  desc4?: p.Flex<"div">;
  title2?: p.Flex<"div">;
  embedHtml?: p.Flex<typeof Embed>;
  cmc?: p.Flex<"a"> & Partial<LinkProps>;
  telegram?: p.Flex<"a"> & Partial<LinkProps>;
  twitter?: p.Flex<"a"> & Partial<LinkProps>;
  menuOverlay?: p.Flex<typeof MenuOverlay>;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "navbar.isMenuOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsvWlfn14Jm89In()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
          color: red;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <PlasmicHead
            data-plasmic-name={"pageMetadataOverride"}
            data-plasmic-override={overrides.pageMetadataOverride}
            className={classNames("__wab_instance", sty.pageMetadataOverride)}
            description={"Inovasi mata uang digital Nusantara" as const}
            image={"/plasmic/iddr/images/iddrRoundedjpg.jpg"}
            title={"Indonesia Digital Rupiah" as const}
          />

          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
            isMenuOpen={p.generateStateValueProp($state, [
              "navbar",
              "isMenuOpen"
            ])}
            onIsMenuOpenChange={p.generateStateOnChangeProp($state, [
              "navbar",
              "isMenuOpen"
            ])}
          />

          <div className={classNames(projectcss.all, sty.freeBox__vB9)}>
            <div
              className={classNames(projectcss.all, sty.freeBox__zoEqj)}
              id={"home" as const}
            >
              <div className={classNames(projectcss.all, sty.columns__a7Wpx)}>
                <div className={classNames(projectcss.all, sty.column__jxi8B)}>
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__nmXAr)}
                    direction={"left" as const}
                    triggerOnce={true}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__xFVw0)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hs2U2
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__qkxOl
                          )}
                        >
                          {"Indonesia \nDigital Rupiah"}
                        </h2>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xXGvV
                          )}
                        >
                          {
                            "Inovasi Mata Uang Digital Nusantara untuk menghubungkan \ndunia digital dengan Rupiah anda"
                          }
                        </div>
                      </p.Stack>
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vYncT
                        )}
                      >
                        <Button2
                          className={classNames(
                            "__wab_instance",
                            sty.button2__phul1
                          )}
                          endIcon={
                            <Icon38Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__vM6PJ
                              )}
                              role={"img"}
                            />
                          }
                          link={"/whitepaper-25-May-2023.pdf" as const}
                          shape={"rounded" as const}
                          showStartIcon={true}
                          startIcon={
                            <GoogleDocsSvgrepoComsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__vxCiI
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={false}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wCz2E
                            )}
                          >
                            {"Download our Whitepaper"}
                          </div>
                        </Button2>
                        <Button2
                          className={classNames(
                            "__wab_instance",
                            sty.button2__ehw0L
                          )}
                          endIcon={
                            <Icon38Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__iOif8
                              )}
                              role={"img"}
                            />
                          }
                          link={"#about" as const}
                          shape={"rounded" as const}
                          startIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__nqjhb
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___77PAx
                            )}
                          >
                            {"Pelajari Selengkapnya ->"}
                          </div>
                        </Button2>
                      </p.Stack>
                    </p.Stack>
                  </Reveal>
                </div>
                <div className={classNames(projectcss.all, sty.column__pkUaO)}>
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__swtb7)}
                    direction={"right" as const}
                    triggerOnce={true}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lhkpQ)}
                    />
                  </Reveal>
                </div>
              </div>
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox___1Seb)}
            id={"about" as const}
          >
            <div className={classNames(projectcss.all, sty.freeBox__yOjcJ)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__aqzXj)}
              >
                <div className={classNames(projectcss.all, sty.column___3Atbj)}>
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fRwtX)}
                    >
                      <Reveal
                        className={classNames(
                          "__wab_instance",
                          sty.reveal__clfvY
                        )}
                        direction={"left" as const}
                        triggerOnce={true}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__joUr)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/iddr/images/indonesianMappng.png",
                            fullWidth: 780,
                            fullHeight: 349,
                            aspectRatio: undefined
                          }}
                        />
                      </Reveal>
                    </div>
                  ) : null}
                </div>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__sBMrx)}
                >
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__jy8R7)}
                    direction={"right" as const}
                    triggerOnce={true}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__h4MuD
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__bswU
                          )}
                        >
                          {"Tentang Indonesia \nDigital Rupiah"}
                        </h2>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tO4
                          )}
                        >
                          {
                            "Indonesia Digital Rupiah adalah mata uang digital terkini yang dirancang untuk mendukung kemajuan ekonomi dan teknologi di Indonesia. Menggabungkan keamanan, kecepatan, dan efisiensi blockchain dengan nilai dan stabilitas Rupiah, Indonesia Digital Rupiah menjadi solusi yang inovatif dalam era digital. Dengan menggunakan Indonesia Digital Rupiah, Anda dapat melakukan transaksi digital secara mudah, aman, dan cepat, baik dalam negeri maupun lintas batas. Bergabunglah dengan revolusi mata uang digital Indonesia dan rasakan kemudahan serta manfaatnya dalam kehidupan sehari-hari."
                          }
                        </div>
                      </div>
                    ) : null}
                  </Reveal>
                </p.Stack>
              </p.Stack>
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__aNv5A)}
            id={"about" as const}
          >
            <div className={classNames(projectcss.all, sty.freeBox__c3I2J)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__s3Jve)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__y58C)}
                >
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__oeRkk)}
                    direction={"right" as const}
                    triggerOnce={true}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hwh23
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__uEgEx
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Smart Contract Indonesia \nDigital Rupiah "
                            : "Smart Contract \nIndonesia Digital Rupiah "}
                        </h2>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bCvZ
                          )}
                        >
                          {
                            "Indonesia Digital Rupiah memberikan fleksibilitas dan ketersediaan melalui integrasi di berbagai platform blockchain terkemuka"
                          }
                        </div>
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__lZfc9
                            )}
                          >
                            <NetworkCard
                              className={classNames(
                                "__wab_instance",
                                sty.networkCard__n9Ai3
                              )}
                            >
                              <p.Stack
                                as={p.PlasmicLink}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  sty.link__l6O5Q
                                )}
                                component={Link}
                                href={
                                  "https://etherscan.io/token/0x9a8284c2cec196478f01ef4446a0222dd4def00e" as const
                                }
                                platform={"nextjs"}
                                target={"_blank" as const}
                              >
                                <Icon4Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__skzEw
                                  )}
                                  role={"img"}
                                />

                                <h5
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h5,
                                    projectcss.__wab_text,
                                    sty.h5__aUu4S
                                  )}
                                >
                                  {"Ethereum"}
                                </h5>
                                {true ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__k19Go
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___7SC4Q
                                      )}
                                    >
                                      {
                                        "https://etherscan.io/token/0x9a8284c2cec196478f01ef4446a0222dd4def00e"
                                      }
                                    </div>
                                    <Icon8Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__br0Nq
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                ) : null}
                              </p.Stack>
                            </NetworkCard>
                            <NetworkCard
                              className={classNames(
                                "__wab_instance",
                                sty.networkCard__sg0Br
                              )}
                            >
                              <p.Stack
                                as={p.PlasmicLink}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  sty.link__bBe0P
                                )}
                                component={Link}
                                href={
                                  "https://www.bscscan.com/token/0x9a8284c2cec196478f01ef4446a0222dd4def00e" as const
                                }
                                platform={"nextjs"}
                                target={"_blank" as const}
                              >
                                <Icon3Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__mZ6Km
                                  )}
                                  role={"img"}
                                />

                                <h5
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h5,
                                    projectcss.__wab_text,
                                    sty.h5__oZmj0
                                  )}
                                >
                                  {"BSC"}
                                </h5>
                                {true ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__ih0Sx
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___9Mr6
                                      )}
                                    >
                                      {"https://bscscan.com/token/0x9a...f00e"}
                                    </div>
                                    <Icon8Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___4Uf8L
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                ) : null}
                              </p.Stack>
                            </NetworkCard>
                            <NetworkCard
                              className={classNames(
                                "__wab_instance",
                                sty.networkCard__piGP
                              )}
                            >
                              <p.Stack
                                as={p.PlasmicLink}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  sty.link__hikkj
                                )}
                                component={Link}
                                href={
                                  "https://polygonscan.com/token/0x9a8284c2cec196478f01ef4446a0222dd4def00e" as const
                                }
                                platform={"nextjs"}
                                target={"_blank" as const}
                              >
                                <Icon5Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__ji7Nd
                                  )}
                                  role={"img"}
                                />

                                <h5
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h5,
                                    projectcss.__wab_text,
                                    sty.h5__yeSt
                                  )}
                                >
                                  {"Polygon"}
                                </h5>
                                {true ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__iVmVy
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__reNf9
                                      )}
                                    >
                                      {
                                        "https://polygonscan.com/token/0x9a...f00e"
                                      }
                                    </div>
                                    <Icon8Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__e4Ja2
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                ) : null}
                              </p.Stack>
                            </NetworkCard>
                          </p.Stack>
                        ) : null}
                      </div>
                    ) : null}
                  </Reveal>
                </p.Stack>
                <div className={classNames(projectcss.all, sty.column__abTQl)}>
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9TUHz
                      )}
                    >
                      <Reveal
                        className={classNames(
                          "__wab_instance",
                          sty.reveal___1VFEj
                        )}
                        direction={"left" as const}
                        triggerOnce={true}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__syY7)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/iddr/images/smartcontract3Png.png",
                            fullWidth: 1024,
                            fullHeight: 1024,
                            aspectRatio: undefined
                          }}
                        />
                      </Reveal>
                    </div>
                  ) : null}
                </div>
              </p.Stack>
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__aO8ZD)}
            id={"team" as const}
          >
            <div className={classNames(projectcss.all, sty.freeBox__u44ZL)}>
              <Reveal
                className={classNames("__wab_instance", sty.reveal__a6UTc)}
                direction={"up" as const}
                triggerOnce={true}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"title"}
                    data-plasmic-override={overrides.title}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.title)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2___8Z9W
                      )}
                    >
                      {"Tim kami"}
                    </h2>
                    <h6
                      className={classNames(
                        projectcss.all,
                        projectcss.h6,
                        projectcss.__wab_text,
                        sty.h6__xEvGy
                      )}
                    >
                      {
                        "Kami bekerja dengan pengalaman dan keahlian terbaik di industri keuangan."
                      }
                    </h6>
                  </p.Stack>
                ) : null}
              </Reveal>
              <Reveal
                className={classNames("__wab_instance", sty.reveal__yDdRl)}
                direction={"up" as const}
                triggerOnce={true}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns__gWgGi)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__cWWzc)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__uoVx)}
                      displayHeight={"200px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"200px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/iddr/images/fandy3Png.png",
                        fullWidth: 800,
                        fullHeight: 800,
                        aspectRatio: undefined
                      }}
                    />

                    {true ? (
                      <div
                        data-plasmic-name={"desc"}
                        data-plasmic-override={overrides.desc}
                        className={classNames(projectcss.all, sty.desc)}
                      >
                        <h6
                          className={classNames(
                            projectcss.all,
                            projectcss.h6,
                            projectcss.__wab_text,
                            sty.h6__x3J1W
                          )}
                        >
                          {"Fandy Label Honggono"}
                        </h6>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__x2GMl
                          )}
                        >
                          {"CEO"}
                        </div>
                      </div>
                    ) : null}
                  </p.Stack>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__exXk1)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__obYqS)}
                      displayHeight={"200px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"200px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/iddr/images/janepng.png",
                        fullWidth: 550,
                        fullHeight: 551,
                        aspectRatio: undefined
                      }}
                    />

                    {true ? (
                      <div
                        data-plasmic-name={"desc2"}
                        data-plasmic-override={overrides.desc2}
                        className={classNames(projectcss.all, sty.desc2)}
                      >
                        <h6
                          className={classNames(
                            projectcss.all,
                            projectcss.h6,
                            projectcss.__wab_text,
                            sty.h6__wDsiE
                          )}
                        >
                          {"Jane Malinda Sutanto"}
                        </h6>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pDx96
                          )}
                        >
                          {"CFO"}
                        </div>
                      </div>
                    ) : null}
                  </p.Stack>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__dDnKp)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__bCni)}
                      displayHeight={"200px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"200px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/iddr/images/yulipng.png",
                        fullWidth: 638,
                        fullHeight: 638,
                        aspectRatio: undefined
                      }}
                    />

                    {true ? (
                      <div
                        data-plasmic-name={"desc3"}
                        data-plasmic-override={overrides.desc3}
                        className={classNames(projectcss.all, sty.desc3)}
                      >
                        <h6
                          className={classNames(
                            projectcss.all,
                            projectcss.h6,
                            projectcss.__wab_text,
                            sty.h6___0Y1Yz
                          )}
                        >
                          {"Liem Yuliana"}
                        </h6>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ovf1K
                          )}
                        >
                          {"Finance Advisor"}
                        </div>
                      </div>
                    ) : null}
                  </p.Stack>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__zEpn)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___4UDsR)}
                      displayHeight={"200px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"200px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/iddr/images/willypng.png",
                        fullWidth: 1200,
                        fullHeight: 1200,
                        aspectRatio: undefined
                      }}
                    />

                    {true ? (
                      <div
                        data-plasmic-name={"desc4"}
                        data-plasmic-override={overrides.desc4}
                        className={classNames(projectcss.all, sty.desc4)}
                      >
                        <h6
                          className={classNames(
                            projectcss.all,
                            projectcss.h6,
                            projectcss.__wab_text,
                            sty.h6__d3Qgw
                          )}
                        >
                          {"Willyanto Wijaya S"}
                        </h6>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nqwbo
                          )}
                        >
                          {"Technical Advisor"}
                        </div>
                      </div>
                    ) : null}
                  </p.Stack>
                </p.Stack>
              </Reveal>
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__dAw1O)}
            id={"contact" as const}
          >
            <div className={classNames(projectcss.all, sty.freeBox__lcmS1)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__vDqJ9)}
              >
                <div className={classNames(projectcss.all, sty.column__jtIQ)}>
                  {true ? (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"title2"}
                      data-plasmic-override={overrides.title2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.title2)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__h17U4
                        )}
                      >
                        {"Kontak"}
                      </h2>
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6__dLzMm
                        )}
                      >
                        {"Let’s Work Together"}
                      </h6>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__exB6N
                        )}
                      >
                        {
                          "JL. Jend. Sudirman Kav 21, Kel. Karet Kuningan, Kec. Setiabudi, Jakarta Selatan, DKI Jakarta, Indonesia 12920\n\ninfo@iddr.io"
                        }
                      </div>
                    </p.Stack>
                  ) : null}
                </div>
                <div className={classNames(projectcss.all, sty.column__haRrA)}>
                  <Embed
                    data-plasmic-name={"embedHtml"}
                    data-plasmic-override={overrides.embedHtml}
                    className={classNames("__wab_instance", sty.embedHtml)}
                    code={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ('<iframe src="https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d15865.606422642355!2d106.8222893!3d-6.2106448!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x2e69f55e2d3fbe1f%3A0x9a3af0621b70d07f!2sWeWork%20Sinarmas%20MSIG%20Tower!5e0!3m2!1sen!2sid!4v1684983001341!5m2!1sen!2sid" width="360" height="460" style="border:0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>' as const)
                        : ('<iframe src="https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d15865.606422642355!2d106.8222893!3d-6.2106448!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x2e69f55e2d3fbe1f%3A0x9a3af0621b70d07f!2sWeWork%20Sinarmas%20MSIG%20Tower!5e0!3m2!1sen!2sid!4v1684983001341!5m2!1sen!2sid" width="600" height="450" style="border:0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>' as const)
                    }
                  />
                </div>
              </p.Stack>
            </div>
          </div>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__tk5Ht)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__niorR)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uwzXi
                )}
              >
                {"© 2023 by Indonesia Digital Rupiah"}
              </div>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__y0C9B)}
              >
                <p.PlasmicLink
                  data-plasmic-name={"cmc"}
                  data-plasmic-override={overrides.cmc}
                  className={classNames(projectcss.all, projectcss.a, sty.cmc)}
                  component={Link}
                  href={
                    "https://coinmarketcap.com/currencies/idr-digital/" as const
                  }
                  platform={"nextjs"}
                  target={"_blank" as const}
                >
                  <CmcsvgIcon
                    className={classNames(projectcss.all, sty.svg__bBfyP)}
                    role={"img"}
                  />
                </p.PlasmicLink>
                <p.PlasmicLink
                  data-plasmic-name={"telegram"}
                  data-plasmic-override={overrides.telegram}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.telegram
                  )}
                  component={Link}
                  href={"https://t.me/iddr_io" as const}
                  platform={"nextjs"}
                  target={"_blank" as const}
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__asEhz)}
                    role={"img"}
                  />
                </p.PlasmicLink>
                <p.PlasmicLink
                  data-plasmic-name={"twitter"}
                  data-plasmic-override={overrides.twitter}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.twitter
                  )}
                  component={Link}
                  href={"https://twitter.com/iddr_io" as const}
                  platform={"nextjs"}
                  target={"_blank" as const}
                >
                  <Icon2Icon
                    className={classNames(projectcss.all, sty.svg__bkLqu)}
                    role={"img"}
                  />
                </p.PlasmicLink>
              </p.Stack>
            </div>
          </p.Stack>
          {(
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? (() => {
                  try {
                    return $state.navbar.isMenuOpen;
                  } catch (e) {
                    if (e instanceof TypeError) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return $state.navbar.isMenuOpen;
                  } catch (e) {
                    if (e instanceof TypeError) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <MenuOverlay
              data-plasmic-name={"menuOverlay"}
              data-plasmic-override={overrides.menuOverlay}
              className={classNames("__wab_instance", sty.menuOverlay)}
              slot={
                <Button2
                  className={classNames("__wab_instance", sty.button2__bNeGi)}
                  color={"clear" as const}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__wa2G5)}
                      role={"img"}
                    />
                  }
                  link={"#home" as const}
                  onClick={async event => {
                    const $steps = {};
                    $steps["updateNavbarIsMenuOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "updateVariable",
                                interactionUuid: "C4HSr4IYhs",
                                componentUuid: "S-EPZS57Iq32",
                                argName: "variable"
                              },
                              () => ({
                                objRoot: $state,
                                variablePath: ["navbar", "isMenuOpen"]
                              })
                            ),
                            operation: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "updateVariable",
                                interactionUuid: "C4HSr4IYhs",
                                componentUuid: "S-EPZS57Iq32",
                                argName: "operation"
                              },
                              () => 4
                            )
                          };
                          return __wrapUserFunction(
                            {
                              type: "InteractionLoc",
                              actionName: "updateVariable",
                              interactionUuid: "C4HSr4IYhs",
                              componentUuid: "S-EPZS57Iq32"
                            },
                            () =>
                              (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = p.get(objRoot, variablePath);
                                p.set(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]),
                            actionArgs
                          );
                        })()
                      : undefined;
                    if (
                      typeof $steps["updateNavbarIsMenuOpen"] === "object" &&
                      typeof $steps["updateNavbarIsMenuOpen"].then ===
                        "function"
                    ) {
                      $steps["updateNavbarIsMenuOpen"] =
                        await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariable",
                            interactionUuid: "C4HSr4IYhs",
                            componentUuid: "S-EPZS57Iq32"
                          },
                          $steps["updateNavbarIsMenuOpen"]
                        );
                    }
                  }}
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__t9Xdm)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kkldl
                    )}
                  >
                    {"Beranda"}
                  </div>
                </Button2>
              }
              slot2={
                <Button2
                  className={classNames("__wab_instance", sty.button2__xFq2E)}
                  color={"clear" as const}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__k7YTd)}
                      role={"img"}
                    />
                  }
                  link={"#about" as const}
                  onClick={async event => {
                    const $steps = {};
                    $steps["updateNavbarIsMenuOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "updateVariable",
                                interactionUuid: "gClixM5Ir",
                                componentUuid: "S-EPZS57Iq32",
                                argName: "variable"
                              },
                              () => ({
                                objRoot: $state,
                                variablePath: ["navbar", "isMenuOpen"]
                              })
                            ),
                            operation: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "updateVariable",
                                interactionUuid: "gClixM5Ir",
                                componentUuid: "S-EPZS57Iq32",
                                argName: "operation"
                              },
                              () => 4
                            )
                          };
                          return __wrapUserFunction(
                            {
                              type: "InteractionLoc",
                              actionName: "updateVariable",
                              interactionUuid: "gClixM5Ir",
                              componentUuid: "S-EPZS57Iq32"
                            },
                            () =>
                              (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = p.get(objRoot, variablePath);
                                p.set(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]),
                            actionArgs
                          );
                        })()
                      : undefined;
                    if (
                      typeof $steps["updateNavbarIsMenuOpen"] === "object" &&
                      typeof $steps["updateNavbarIsMenuOpen"].then ===
                        "function"
                    ) {
                      $steps["updateNavbarIsMenuOpen"] =
                        await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariable",
                            interactionUuid: "gClixM5Ir",
                            componentUuid: "S-EPZS57Iq32"
                          },
                          $steps["updateNavbarIsMenuOpen"]
                        );
                    }
                  }}
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg___8FBP)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__v6BfB
                    )}
                  >
                    {"Tentang"}
                  </div>
                </Button2>
              }
              slot3={
                <Button2
                  className={classNames("__wab_instance", sty.button2__bKkjH)}
                  color={"clear" as const}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__aL24D)}
                      role={"img"}
                    />
                  }
                  link={"#team" as const}
                  onClick={async event => {
                    const $steps = {};
                    $steps["updateNavbarIsMenuOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "updateVariable",
                                interactionUuid: "HVcRtLNau",
                                componentUuid: "S-EPZS57Iq32",
                                argName: "variable"
                              },
                              () => ({
                                objRoot: $state,
                                variablePath: ["navbar", "isMenuOpen"]
                              })
                            ),
                            operation: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "updateVariable",
                                interactionUuid: "HVcRtLNau",
                                componentUuid: "S-EPZS57Iq32",
                                argName: "operation"
                              },
                              () => 4
                            )
                          };
                          return __wrapUserFunction(
                            {
                              type: "InteractionLoc",
                              actionName: "updateVariable",
                              interactionUuid: "HVcRtLNau",
                              componentUuid: "S-EPZS57Iq32"
                            },
                            () =>
                              (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = p.get(objRoot, variablePath);
                                p.set(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]),
                            actionArgs
                          );
                        })()
                      : undefined;
                    if (
                      typeof $steps["updateNavbarIsMenuOpen"] === "object" &&
                      typeof $steps["updateNavbarIsMenuOpen"].then ===
                        "function"
                    ) {
                      $steps["updateNavbarIsMenuOpen"] =
                        await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariable",
                            interactionUuid: "HVcRtLNau",
                            componentUuid: "S-EPZS57Iq32"
                          },
                          $steps["updateNavbarIsMenuOpen"]
                        );
                    }
                  }}
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__nttXz)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vnY7U
                    )}
                  >
                    {"Tim"}
                  </div>
                </Button2>
              }
              slot4={
                <Button2
                  className={classNames("__wab_instance", sty.button2__nzTzT)}
                  color={"clear" as const}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__rmG2C)}
                      role={"img"}
                    />
                  }
                  link={"#contact" as const}
                  onClick={async event => {
                    const $steps = {};
                    $steps["updateNavbarIsMenuOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "updateVariable",
                                interactionUuid: "kM2UgpTWd",
                                componentUuid: "S-EPZS57Iq32",
                                argName: "variable"
                              },
                              () => ({
                                objRoot: $state,
                                variablePath: ["navbar", "isMenuOpen"]
                              })
                            ),
                            operation: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "updateVariable",
                                interactionUuid: "kM2UgpTWd",
                                componentUuid: "S-EPZS57Iq32",
                                argName: "operation"
                              },
                              () => 4
                            )
                          };
                          return __wrapUserFunction(
                            {
                              type: "InteractionLoc",
                              actionName: "updateVariable",
                              interactionUuid: "kM2UgpTWd",
                              componentUuid: "S-EPZS57Iq32"
                            },
                            () =>
                              (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = p.get(objRoot, variablePath);
                                p.set(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]),
                            actionArgs
                          );
                        })()
                      : undefined;
                    if (
                      typeof $steps["updateNavbarIsMenuOpen"] === "object" &&
                      typeof $steps["updateNavbarIsMenuOpen"].then ===
                        "function"
                    ) {
                      $steps["updateNavbarIsMenuOpen"] =
                        await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariable",
                            interactionUuid: "kM2UgpTWd",
                            componentUuid: "S-EPZS57Iq32"
                          },
                          $steps["updateNavbarIsMenuOpen"]
                        );
                    }
                  }}
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__d81Vk)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pot9A
                    )}
                  >
                    {"Kontak"}
                  </div>
                </Button2>
              }
            >
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__a9M7
                )}
                component={Link}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateNavbarIsMenuOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariable",
                              interactionUuid: "MyFjvX2trO",
                              componentUuid: "S-EPZS57Iq32",
                              argName: "variable"
                            },
                            () => ({
                              objRoot: $state,
                              variablePath: ["navbar", "isMenuOpen"]
                            })
                          ),
                          operation: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariable",
                              interactionUuid: "MyFjvX2trO",
                              componentUuid: "S-EPZS57Iq32",
                              argName: "operation"
                            },
                            () => 4
                          )
                        };
                        return __wrapUserFunction(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariable",
                            interactionUuid: "MyFjvX2trO",
                            componentUuid: "S-EPZS57Iq32"
                          },
                          () =>
                            (({ variable, value, startIndex, deleteCount }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = p.get(objRoot, variablePath);
                              p.set(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]),
                          actionArgs
                        );
                      })()
                    : undefined;
                  if (
                    typeof $steps["updateNavbarIsMenuOpen"] === "object" &&
                    typeof $steps["updateNavbarIsMenuOpen"].then === "function"
                  ) {
                    $steps["updateNavbarIsMenuOpen"] = await __wrapUserPromise(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariable",
                        interactionUuid: "MyFjvX2trO",
                        componentUuid: "S-EPZS57Iq32"
                      },
                      $steps["updateNavbarIsMenuOpen"]
                    );
                  }
                }}
                platform={"nextjs"}
              >
                <CloseBoldSvgrepoComsvgIcon
                  className={classNames(projectcss.all, sty.svg__m6LrQ)}
                  role={"img"}
                />
              </p.PlasmicLink>
            </MenuOverlay>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageMetadataOverride",
    "navbar",
    "title",
    "desc",
    "desc2",
    "desc3",
    "desc4",
    "title2",
    "embedHtml",
    "cmc",
    "telegram",
    "twitter",
    "menuOverlay"
  ],
  pageMetadataOverride: ["pageMetadataOverride"],
  navbar: ["navbar"],
  title: ["title"],
  desc: ["desc"],
  desc2: ["desc2"],
  desc3: ["desc3"],
  desc4: ["desc4"],
  title2: ["title2"],
  embedHtml: ["embedHtml"],
  cmc: ["cmc"],
  telegram: ["telegram"],
  twitter: ["twitter"],
  menuOverlay: ["menuOverlay"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageMetadataOverride: typeof PlasmicHead;
  navbar: typeof Navbar;
  title: "div";
  desc: "div";
  desc2: "div";
  desc3: "div";
  desc4: "div";
  title2: "div";
  embedHtml: typeof Embed;
  cmc: "a";
  telegram: "a";
  twitter: "a";
  menuOverlay: typeof MenuOverlay;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),
    navbar: makeNodeComponent("navbar"),
    title: makeNodeComponent("title"),
    desc: makeNodeComponent("desc"),
    desc2: makeNodeComponent("desc2"),
    desc3: makeNodeComponent("desc3"),
    desc4: makeNodeComponent("desc4"),
    title2: makeNodeComponent("title2"),
    embedHtml: makeNodeComponent("embedHtml"),
    cmc: makeNodeComponent("cmc"),
    telegram: makeNodeComponent("telegram"),
    twitter: makeNodeComponent("twitter"),
    menuOverlay: makeNodeComponent("menuOverlay"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
